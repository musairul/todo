(()=>{"use strict";var n={365:(n,e,t)=>{t.d(e,{A:()=>s});var r=t(354),o=t.n(r),a=t(314),i=t.n(a)()(o());i.push([n.id,"* {\n  font-family: Arial, Helvetica, sans-serif;\n  /* outline: 1px solid red; */\n}\n\n.title {\n  text-align: center;\n  padding: 10px;\n  color: white;\n}\n\nbody {\n  background-color: lightskyblue;\n}\n\n.controls-container button {\n  font-size: larger;\n  font-weight: bold;\n  border-radius: 10px;\n  padding: 10px;\n  border: 4px solid black;\n  background-color: white;\n  cursor: pointer;\n  transition: background-color 0.3s, box-shadow 0.3s, transform 0.1s; /* Smooth transitions */\n}\n\n/* Hover effect */\nbutton:hover {\n  background-color: white; /* Darker background on hover */\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Adds shadow effect */\n}\n\n/* Active (pressed) effect */\nbutton:active {\n  background-color: gray; /* Even darker background when pressed */\n  transform: scale(0.98); /* Slightly reduces size to mimic pressing effect */\n}\n\n.controls-container {\n  display: flex;\n  gap: 20px;\n  justify-content: center;\n}\n\n.card-container {\n  padding: 5%;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n\n  /* grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); */\n\n  gap: 2rem;\n  height: auto;\n  margin: auto;\n\n  align-items: center;\n}\n\n.card-container button {\n  display: block;\n}\n\n.card {\n  display: flex;\n  flex-direction: column;\n  background-color: white;\n  border-radius: 10px;\n  border: 4px solid black;\n  min-width: 200px;\n  max-width: 400px;\n  /* height: auto; */\n  padding: 20px;\n  color: black;\n  align-items: center;\n}\n\n.project-buttons {\n  background-color: white;\n  border-radius: 5px;\n  border: 3px solid black;\n  font-size: large;\n}\n\n.form-input {\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  background-color: lightgray;\n  border: 3px solid black;\n  border-radius: 10px;\n  padding: 15px;\n  margin-top: 5px;\n  min-width: 10rem;\n  font-size: large;\n}\n\n.form-element {\n  display: flex;\n  flex-direction: column;\n}\n\n.form-element > * {\n  font-size: large;\n  border: none;\n  border-radius: 5px;\n}\n\n.card-controls {\n  display: flex;\n  gap: 15px;\n  justify-content: space-evenly;\n  padding-bottom: 15px;\n}\n\n.card-controls button:hover {\n  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n.hide {\n  display: none;\n}\n\n.task {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  text-align: left;\n  margin: 0;\n  padding: 0;\n  font-size: large;\n  cursor: pointer;\n}\n\n.task > * {\n  margin: 0;\n  padding: 10px;\n}\n\n.medium {\n  color: orange;\n}\n\n.high {\n  color: red;\n}\n\n#projectsContainer {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 2rem;\n  width: 100%;\n  align-items: center;\n}\n","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;EACE,yCAAyC;EACzC,4BAA4B;AAC9B;;AAEA;EACE,kBAAkB;EAClB,aAAa;EACb,YAAY;AACd;;AAEA;EACE,8BAA8B;AAChC;;AAEA;EACE,iBAAiB;EACjB,iBAAiB;EACjB,mBAAmB;EACnB,aAAa;EACb,uBAAuB;EACvB,uBAAuB;EACvB,eAAe;EACf,kEAAkE,EAAE,uBAAuB;AAC7F;;AAEA,iBAAiB;AACjB;EACE,uBAAuB,EAAE,+BAA+B;EACxD,wCAAwC,EAAE,uBAAuB;AACnE;;AAEA,4BAA4B;AAC5B;EACE,sBAAsB,EAAE,wCAAwC;EAChE,sBAAsB,EAAE,mDAAmD;AAC7E;;AAEA;EACE,aAAa;EACb,SAAS;EACT,uBAAuB;AACzB;;AAEA;EACE,WAAW;;EAEX,aAAa;EACb,eAAe;EACf,uBAAuB;;EAEvB,kEAAkE;;EAElE,SAAS;EACT,YAAY;EACZ,YAAY;;EAEZ,mBAAmB;AACrB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,uBAAuB;EACvB,gBAAgB;EAChB,gBAAgB;EAChB,kBAAkB;EAClB,aAAa;EACb,YAAY;EACZ,mBAAmB;AACrB;;AAEA;EACE,uBAAuB;EACvB,kBAAkB;EAClB,uBAAuB;EACvB,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,QAAQ;EACR,2BAA2B;EAC3B,uBAAuB;EACvB,mBAAmB;EACnB,aAAa;EACb,eAAe;EACf,gBAAgB;EAChB,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,gBAAgB;EAChB,YAAY;EACZ,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,SAAS;EACT,6BAA6B;EAC7B,oBAAoB;AACtB;;AAEA;EACE,0CAA0C;AAC5C;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,8BAA8B;EAC9B,gBAAgB;EAChB,SAAS;EACT,UAAU;EACV,gBAAgB;EAChB,eAAe;AACjB;;AAEA;EACE,SAAS;EACT,aAAa;AACf;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,aAAa;EACb,eAAe;EACf,uBAAuB;EACvB,SAAS;EACT,WAAW;EACX,mBAAmB;AACrB",sourcesContent:["* {\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  /* outline: 1px solid red; */\r\n}\r\n\r\n.title {\r\n  text-align: center;\r\n  padding: 10px;\r\n  color: white;\r\n}\r\n\r\nbody {\r\n  background-color: lightskyblue;\r\n}\r\n\r\n.controls-container button {\r\n  font-size: larger;\r\n  font-weight: bold;\r\n  border-radius: 10px;\r\n  padding: 10px;\r\n  border: 4px solid black;\r\n  background-color: white;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s, box-shadow 0.3s, transform 0.1s; /* Smooth transitions */\r\n}\r\n\r\n/* Hover effect */\r\nbutton:hover {\r\n  background-color: white; /* Darker background on hover */\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Adds shadow effect */\r\n}\r\n\r\n/* Active (pressed) effect */\r\nbutton:active {\r\n  background-color: gray; /* Even darker background when pressed */\r\n  transform: scale(0.98); /* Slightly reduces size to mimic pressing effect */\r\n}\r\n\r\n.controls-container {\r\n  display: flex;\r\n  gap: 20px;\r\n  justify-content: center;\r\n}\r\n\r\n.card-container {\r\n  padding: 5%;\r\n\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n\r\n  /* grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); */\r\n\r\n  gap: 2rem;\r\n  height: auto;\r\n  margin: auto;\r\n\r\n  align-items: center;\r\n}\r\n\r\n.card-container button {\r\n  display: block;\r\n}\r\n\r\n.card {\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: white;\r\n  border-radius: 10px;\r\n  border: 4px solid black;\r\n  min-width: 200px;\r\n  max-width: 400px;\r\n  /* height: auto; */\r\n  padding: 20px;\r\n  color: black;\r\n  align-items: center;\r\n}\r\n\r\n.project-buttons {\r\n  background-color: white;\r\n  border-radius: 5px;\r\n  border: 3px solid black;\r\n  font-size: large;\r\n}\r\n\r\n.form-input {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n  background-color: lightgray;\r\n  border: 3px solid black;\r\n  border-radius: 10px;\r\n  padding: 15px;\r\n  margin-top: 5px;\r\n  min-width: 10rem;\r\n  font-size: large;\r\n}\r\n\r\n.form-element {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.form-element > * {\r\n  font-size: large;\r\n  border: none;\r\n  border-radius: 5px;\r\n}\r\n\r\n.card-controls {\r\n  display: flex;\r\n  gap: 15px;\r\n  justify-content: space-evenly;\r\n  padding-bottom: 15px;\r\n}\r\n\r\n.card-controls button:hover {\r\n  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.hide {\r\n  display: none;\r\n}\r\n\r\n.task {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  text-align: left;\r\n  margin: 0;\r\n  padding: 0;\r\n  font-size: large;\r\n  cursor: pointer;\r\n}\r\n\r\n.task > * {\r\n  margin: 0;\r\n  padding: 10px;\r\n}\r\n\r\n.medium {\r\n  color: orange;\r\n}\r\n\r\n.high {\r\n  color: red;\r\n}\r\n\r\n#projectsContainer {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  gap: 2rem;\r\n  width: 100%;\r\n  align-items: center;\r\n}\r\n"],sourceRoot:""}]);const s=i},314:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var A=0;A<n.length;A++){var l=[].concat(n[A]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},354:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},72:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],s=0;s<n.length;s++){var c=n[s],A=r.base?c[0]+r.base:c[0],l=a[A]||0,d="".concat(A," ").concat(l);a[A]=l+1;var u=t(d),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var f=o(p,r);r.byIndex=s,e.splice(s,0,{identifier:d,updater:f,references:1})}i.push(d)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var c=r(n,o),A=0;A<a.length;A++){var l=t(a[A]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=c}}},659:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0;var r=t(72),o=t.n(r),a=t(825),i=t.n(a),s=t(659),c=t.n(s),A=t(56),l=t.n(A),d=t(540),u=t.n(d),p=t(113),f=t.n(p),m=t(365),g={};g.styleTagTransform=f(),g.setAttributes=l(),g.insert=c().bind(null,"head"),g.domAPI=i(),g.insertStyleElement=u(),o()(m.A,g),m.A&&m.A.locals&&m.A.locals,Math.pow(10,8);const E=6e4,C=36e5;function B(n,e){const t=e?.additionalDigits??2,r=function(n){const e={},t=n.split(b.dateTimeDelimiter);let r;if(t.length>2)return e;if(/:/.test(t[0])?r=t[0]:(e.date=t[0],r=t[1],b.timeZoneDelimiter.test(e.date)&&(e.date=n.split(b.timeZoneDelimiter)[0],r=n.substr(e.date.length,n.length))),r){const n=b.timezone.exec(r);n?(e.time=r.replace(n[1],""),e.timezone=n[1]):e.time=r}return e}(n);let o;if(r.date){const n=function(n,e){const t=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),r=n.match(t);if(!r)return{year:NaN,restDateString:""};const o=r[1]?parseInt(r[1]):null,a=r[2]?parseInt(r[2]):null;return{year:null===a?o:100*a,restDateString:n.slice((r[1]||r[2]).length)}}(r.date,t);o=function(n,e){if(null===e)return new Date(NaN);const t=n.match(h);if(!t)return new Date(NaN);const r=!!t[4],o=v(t[1]),a=v(t[2])-1,i=v(t[3]),s=v(t[4]),c=v(t[5])-1;if(r)return function(n,e,t){return e>=1&&e<=53&&t>=0&&t<=6}(0,s,c)?function(n,e,t){const r=new Date(0);r.setUTCFullYear(n,0,4);const o=7*(e-1)+t+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+o),r}(e,s,c):new Date(NaN);{const n=new Date(0);return function(n,e,t){return e>=0&&e<=11&&t>=1&&t<=(w[e]||(S(n)?29:28))}(e,a,i)&&function(n,e){return e>=1&&e<=(S(n)?366:365)}(e,o)?(n.setUTCFullYear(e,a,Math.max(o,i)),n):new Date(NaN)}}(n.restDateString,n.year)}if(!o||isNaN(o.getTime()))return new Date(NaN);const a=o.getTime();let i,s=0;if(r.time&&(s=function(n){const e=n.match(x);if(!e)return NaN;const t=k(e[1]),r=k(e[2]),o=k(e[3]);return function(n,e,t){return 24===n?0===e&&0===t:t>=0&&t<60&&e>=0&&e<60&&n>=0&&n<25}(t,r,o)?t*C+r*E+1e3*o:NaN}(r.time),isNaN(s)))return new Date(NaN);if(!r.timezone){const n=new Date(a+s),e=new Date(0);return e.setFullYear(n.getUTCFullYear(),n.getUTCMonth(),n.getUTCDate()),e.setHours(n.getUTCHours(),n.getUTCMinutes(),n.getUTCSeconds(),n.getUTCMilliseconds()),e}return i=function(n){if("Z"===n)return 0;const e=n.match(y);if(!e)return 0;const t="+"===e[1]?-1:1,r=parseInt(e[2]),o=e[3]&&parseInt(e[3])||0;return function(n,e){return e>=0&&e<=59}(0,o)?t*(r*C+o*E):NaN}(r.timezone),isNaN(i)?new Date(NaN):new Date(a+s+i)}const b={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},h=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,x=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,y=/^([+-])(\d{2})(?::?(\d{2}))?$/;function v(n){return n?parseInt(n):1}function k(n){return n&&parseFloat(n.replace(",","."))||0}const w=[31,null,31,30,31,30,31,31,30,31,30,31];function S(n){return n%400==0||n%4==0&&n%100!=0}function j(n){const e=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===e?new n.constructor(+n):"number"==typeof n||"[object Number]"===e||"string"==typeof n||"[object String]"===e?new Date(n):new Date(NaN)}function D(n,e,t,r){const o=n.querySelector(".task-container"),a=document.createElement("div");a.classList.add("task"),"medium"===t?a.classList.add("medium"):"high"===t&&a.classList.add("high"),a.innerHTML=`\n      <p class="task-text">${e}</p>\n      <p class="due">${r}</p>\n    `,o.appendChild(a),function(n){const e=Array.from(n.querySelectorAll(".task"));e.sort(((n,e)=>function(n,e){const t=j(n),r=j(e),o=t.getTime()-r.getTime();return o<0?-1:o>0?1:o}(B(n.querySelector(".due").textContent),B(e.querySelector(".due").textContent)))),e.forEach((e=>n.appendChild(e)))}(o),a.addEventListener("click",(()=>{a.remove(),N()})),N()}function N(){const n=[];document.querySelectorAll("#card").forEach((e=>{console.log(e);const t=e.querySelector(".project-title").textContent,r=Array.from(e.querySelectorAll(".task")).map((n=>({name:n.querySelector(".task-text").textContent,priority:n.classList.contains("high")?"high":n.classList.contains("medium")?"medium":"low",dueDate:n.querySelector(".due").textContent})));n.push({title:t,tasks:r})})),localStorage.setItem("projects",JSON.stringify(n)),console.log(localStorage)}function T(n){const e=document.getElementById("projectsContainer"),t=(document.querySelector(".card-container"),document.createElement("div"));t.classList.add("card"),t.id="card",t.innerHTML=`\n    <h2 class="project-title">${n}</h2>\n    <div class="card-controls">\n      <button class="project-buttons new-task">New task</button>\n      <button class="project-buttons delete-project">Delete project</button>\n    </div>\n    <form class="form-input hide">\n      <div class="form-element">\n        <label for="taskName">Name</label>\n        <input type="text" class="taskName" required placeholder="Task name" />\n      </div>\n      <div class="form-element">\n        <label for="priority">Priority</label>\n        <select class="priority">\n          <option value="low">Low</option>\n          <option value="medium">Medium</option>\n          <option value="high">High</option>\n        </select>\n      </div>\n      <div class="form-element">\n        <label for="dueDate">Due date</label>\n        <input type="date" class="dueDate" />\n      </div>\n      <button type="submit" class="add-task">Add task</button>\n    </form>\n    <div class="task-container"></div>\n  `,e.prepend(t);const r=t.querySelector(".new-task"),o=t.querySelector(".form-input"),a=t.querySelector(".delete-project");return r.addEventListener("click",(()=>{o.classList.toggle("hide")})),o.addEventListener("submit",(n=>{n.preventDefault();const e=o.querySelector(".taskName").value,r=o.querySelector(".priority").value,a=o.querySelector(".dueDate").value;D(t,e,r,a),o.reset(),o.classList.add("hide"),N()})),a.addEventListener("click",(()=>{!function(n){n.remove()}(t),N()})),t}document.addEventListener("DOMContentLoaded",(()=>{const n=document.getElementById("newProject"),e=document.getElementById("addProject"),t=document.getElementById("inputProjectCard"),r=document.getElementById("inputProject");n.addEventListener("click",(()=>{t.classList.remove("hide"),n.classList.add("hide"),e.classList.remove("hide")})),r.addEventListener("submit",(o=>{o.preventDefault(),T(document.getElementById("projectTitle").value),t.classList.add("hide"),n.classList.remove("hide"),e.classList.add("hide"),r.reset(),N()})),function(){const n=JSON.parse(localStorage.getItem("projects"))||[];console.log(n),n.forEach((n=>{console.log(n);let e=T(n.title);console.log(e),n.tasks.forEach((n=>{console.log(n),D(e,n.name,n.priority,n.dueDate)}))}))}()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,